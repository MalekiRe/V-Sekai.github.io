#title: Players want to define their own virtual worlds, but they can&apos;t because making their own virtual worlds is hard.
#direction: right
#background: transparent
#fill: #455A64; #37474F
#stroke: #B0BEC5
#ranker: longest-path

[V-Sekai| Players want to define the virtual worlds. | V-Sekai https://v-sekai.org/ |
Players can't make their own virtual worlds because it is hard. |
Further the development of Godot and open source tech.| 
Build a tech stack and service for interactive multiplayer VR games.
]
[V-Sekai] -> [Godot world live creation]
[Godot world live creation] -> [Imported physics]
[Godot world live creation] -> [Place prexisting blocks with blockmeshing  ]
[Godot world live creation]-> [<table> Create Godot world creation tools ]
[Godot world live creation]-> [Place scenes ]
[Godot world live creation]-> [Construct layers collaboratively ]
[Godot world live creation]-> [Painting  ]
[Godot world live creation]-> [<table> Create Godot world creation tools]
[<table> Create Godot world creation tools | 3D models with CASSIE | Make cassie commercial remixable | Painting with MaterialX ]
[V-Sekai] -> [One gitlab repo with source assets? (sky celebration and sponza). | SDK (set of submodules?) https://github.com/V-Sekai/vsk_sdk. | Being able to enter a vsk map âˆ€ maps (mvp = 1 map). | Enter a vsk map with an entity in it (upload sky celebration OR upload sponza with one beachball).] 
[V-Sekai] -> [Being able to have our group of people join and communicate. (godot speech).]
[Being able to have our group of people join and communicate. (godot speech).] -> [VR support (openxr).]
[Being able to have our group of people join and communicate. (godot speech).] -> [Interacting with objects in desktop mode is important so that we can test easier.] 
[VR support (openxr).] -> [Interacting with objects in vr.]
[Interacting with objects in vr.] -> [Scripting (wasgo).]
[Scripting (wasgo).] -> [Network server to support 1000.]
[V-Sekai] ->  [SDK (set of submodules?) https://github.com/V-Sekai/vsk_sdk.]
[SDK (set of submodules?) https://github.com/V-Sekai/vsk_sdk.] -> [VSK_map source asset repositories]
[VSK_map source asset repositories] -> [Lyuma will make a new github repo V-Sekai/vrm_submodule - we need a script for updating all submodules to the latest on a given branch.]
[VSK_map source asset repositories | I think vsk_sdk should only be submodules, no assets. | We can git rebase -i to remove the binary assets from it. | git merge to install the vsk_sdk into another project (such as gitlab). we need to look if git subtree supports .gitmodules and we can use it if it does. | make vsk_sdk the head for all of the sdk related submodules. do our development there and commit submodules regularly. | In groups project, pretend we delete all submodules in vsk_sdk. Then git merge vsk_sdk/main to bring in the submodules from that repo. | Every time we update vsk_sdk, do a git merge into groups and our source asset repo with sponza etc.]
[VSK_map source asset repositories] -> [Don't save .scn assets in git.| no GLB. | blend files ~10MB ok. >100MB let's either use GitLab LFS or something else.| Evaluate https://dvc.org/]